Program 1:
Execution Stack: 
{a=10; print(a)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
a=10
print(a)

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(a)

Symbols Table: 
a = 10

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
a = 10

Output: 
10

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{{{v=10; new(v, 20)}; {new(a, 22); WriteHeap(a, 30)}}; {print(a); print(ReadHeap(a))}}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{{v=10; new(v, 20)}; {new(a, 22); WriteHeap(a, 30)}}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{v=10; new(v, 20)}
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=10
new(v, 20)
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
new(v, 20)
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
v = 10

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
v = 1

Output: 

FileTable: 

Heap: 
1 -> 20
-------
Program 1:
Execution Stack: 
new(a, 22)
WriteHeap(a, 30)
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
v = 1

Output: 

FileTable: 

Heap: 
1 -> 20
-------
Program 1:
Execution Stack: 
WriteHeap(a, 30)
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
a = 2
v = 1

Output: 

FileTable: 

Heap: 
1 -> 20
2 -> 22
-------
Program 1:
Execution Stack: 
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
a = 2
v = 1

Output: 

FileTable: 

Heap: 
1 -> 20
2 -> 30
-------
Program 1:
Execution Stack: 
print(a)
print(ReadHeap(a))
a=0

Symbols Table: 
a = 2
v = 1

Output: 

FileTable: 

Heap: 
1 -> 20
2 -> 30
-------
Program 1:
Execution Stack: 
print(ReadHeap(a))
a=0

Symbols Table: 
a = 2
v = 1

Output: 
2

FileTable: 

Heap: 
1 -> 20
2 -> 30
-------
Program 1:
Execution Stack: 
a=0

Symbols Table: 
a = 2
v = 1

Output: 
2
30

FileTable: 

Heap: 
1 -> 20
2 -> 30
-------
Program 1:
Execution Stack: 

Symbols Table: 
a = 0
v = 1

Output: 
2
30

FileTable: 

Heap: 
1 -> 20
2 -> 30
-------
Program 1:
Execution Stack: 
v=10
{new(a, 22); {Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{new(a, 22); {Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}}

Symbols Table: 
v = 10

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
new(a, 22)
{Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}

Symbols Table: 
v = 10

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}})
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 2:
Execution Stack: 
{WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
print(v)
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 2:
Execution Stack: 
WriteHeap(a, 30)
{v=32; {print(v); print(ReadHeap(a))}}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 10

Output: 
10

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
{v=32; {print(v); print(ReadHeap(a))}}

Symbols Table: 
a = 1
v = 10

Output: 
10

FileTable: 

Heap: 
1 -> 30
-------
Program 1:
Execution Stack: 

Symbols Table: 
a = 1
v = 10

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
v=32
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 10

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 32

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
print(v)
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 32

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 32

Output: 
10
30
32

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 

Symbols Table: 
a = 1
v = 32

Output: 
10
30
32
30

FileTable: 

Heap: 
1 -> 30
-------
Program 3:
Execution Stack: 
{{{v=10; new(v, 20)}; {new(a, 22); WriteHeap(a, 30)}}; {print(a); print(ReadHeap(a))}}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
{{v=10; new(v, 20)}; {new(a, 22); WriteHeap(a, 30)}}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
{v=10; new(v, 20)}
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
v=10
new(v, 20)
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
new(v, 20)
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
v = 10

Output: 

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
{new(a, 22); WriteHeap(a, 30)}
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
v = 2

Output: 

FileTable: 

Heap: 
2 -> 20
-------
Program 3:
Execution Stack: 
new(a, 22)
WriteHeap(a, 30)
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
v = 2

Output: 

FileTable: 

Heap: 
2 -> 20
-------
Program 3:
Execution Stack: 
WriteHeap(a, 30)
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
a = 3
v = 2

Output: 

FileTable: 

Heap: 
2 -> 20
3 -> 22
-------
Program 3:
Execution Stack: 
{print(a); print(ReadHeap(a))}
a=0

Symbols Table: 
a = 3
v = 2

Output: 

FileTable: 

Heap: 
2 -> 20
3 -> 30
-------
Program 3:
Execution Stack: 
print(a)
print(ReadHeap(a))
a=0

Symbols Table: 
a = 3
v = 2

Output: 

FileTable: 

Heap: 
2 -> 20
3 -> 30
-------
Program 3:
Execution Stack: 
print(ReadHeap(a))
a=0

Symbols Table: 
a = 3
v = 2

Output: 
3

FileTable: 

Heap: 
2 -> 20
3 -> 30
-------
Program 3:
Execution Stack: 
a=0

Symbols Table: 
a = 3
v = 2

Output: 
3
30

FileTable: 

Heap: 
2 -> 20
3 -> 30
-------
Program 3:
Execution Stack: 

Symbols Table: 
a = 0
v = 2

Output: 
3
30

FileTable: 

Heap: 
2 -> 20
3 -> 30
-------
Program 1:
Execution Stack: 
v=10
{new(a, 22); {Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{new(a, 22); {Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}}

Symbols Table: 
v = 10

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
new(a, 22)
{Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}

Symbols Table: 
v = 10

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}); {print(v); print(ReadHeap(a))}}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
Fork({WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}})
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 2:
Execution Stack: 
{WriteHeap(a, 30); {v=32; {print(v); print(ReadHeap(a))}}}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
print(v)
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 2:
Execution Stack: 
WriteHeap(a, 30)
{v=32; {print(v); print(ReadHeap(a))}}

Symbols Table: 
a = 1
v = 10

Output: 

FileTable: 

Heap: 
1 -> 22
-------
Program 1:
Execution Stack: 
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 10

Output: 
10

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
{v=32; {print(v); print(ReadHeap(a))}}

Symbols Table: 
a = 1
v = 10

Output: 
10

FileTable: 

Heap: 
1 -> 30
-------
Program 1:
Execution Stack: 

Symbols Table: 
a = 1
v = 10

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
v=32
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 10

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
{print(v); print(ReadHeap(a))}

Symbols Table: 
a = 1
v = 32

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
print(v)
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 32

Output: 
10
30

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 
print(ReadHeap(a))

Symbols Table: 
a = 1
v = 32

Output: 
10
30
32

FileTable: 

Heap: 
1 -> 30
-------
Program 2:
Execution Stack: 

Symbols Table: 
a = 1
v = 32

Output: 
10
30
32
30

FileTable: 

Heap: 
1 -> 30
-------
Program 1:
Execution Stack: 
v=20
{model.ForStatement@1554ca40; print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{model.ForStatement@1554ca40; print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
model.ForStatement@1554ca40
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(model.LessThanExpression@5eab8e98){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{model.ForStatement@36474cb9; print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{model.ForStatement@36474cb9; print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
model.ForStatement@36474cb9
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; Fork({print(v); v=v+1})}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; {v=v+1; Fork({print(v); v=v+1})}}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3)v=v+1
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3)Fork({print(v); v=v+1})
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=v+1; Fork({print(v); v=v+1})}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
Fork({print(v); v=v+1})
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){v=0; v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 
{print(v); v=v+1}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 
print(v)
v=v+1

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200
20

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 
v=v+1

Symbols Table: 
v = 20

Output: 
200
20

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 

Symbols Table: 
v = 21

Output: 
200
20

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){Fork({print(v); v=v+1}); {v=0; v=v+1}}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){{v=0; v=v+1}; Fork({print(v); v=v+1})}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 20

Output: 
200

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=20
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{for(v=0; v<3; v=v+1); print(10*v)}

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
for(v=0; v<3; v=v+1)
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=0
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 20

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 0

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{Fork({print(v); v=v+1}); v=v+1}
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 0

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
Fork({print(v); v=v+1})
v=v+1
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 0

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=v+1
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 0

Output: 

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 
{print(v); v=v+1}

Symbols Table: 
v = 0

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 1

Output: 

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 
print(v)
v=v+1

Symbols Table: 
v = 0

Output: 

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{Fork({print(v); v=v+1}); v=v+1}
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 1

Output: 
0

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 
v=v+1

Symbols Table: 
v = 0

Output: 
0

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
Fork({print(v); v=v+1})
v=v+1
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 1

Output: 
0

FileTable: 

Heap: 
-------
Program 2:
Execution Stack: 

Symbols Table: 
v = 1

Output: 
0

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=v+1
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 1

Output: 
0

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
{print(v); v=v+1}

Symbols Table: 
v = 1

Output: 
0

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 2

Output: 
0

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
print(v)
v=v+1

Symbols Table: 
v = 1

Output: 
0

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
{Fork({print(v); v=v+1}); v=v+1}
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 2

Output: 
0
1

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 
v=v+1

Symbols Table: 
v = 1

Output: 
0
1

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
Fork({print(v); v=v+1})
v=v+1
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 2

Output: 
0
1

FileTable: 

Heap: 
-------
Program 3:
Execution Stack: 

Symbols Table: 
v = 2

Output: 
0
1

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
v=v+1
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 2

Output: 
0
1

FileTable: 

Heap: 
-------
Program 4:
Execution Stack: 
{print(v); v=v+1}

Symbols Table: 
v = 2

Output: 
0
1

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
while(v<3){Fork({print(v); v=v+1}); v=v+1}
print(10*v)

Symbols Table: 
v = 3

Output: 
0
1

FileTable: 

Heap: 
-------
Program 4:
Execution Stack: 
print(v)
v=v+1

Symbols Table: 
v = 2

Output: 
0
1

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 
print(10*v)

Symbols Table: 
v = 3

Output: 
0
1
2

FileTable: 

Heap: 
-------
Program 4:
Execution Stack: 
v=v+1

Symbols Table: 
v = 2

Output: 
0
1
2

FileTable: 

Heap: 
-------
Program 1:
Execution Stack: 

Symbols Table: 
v = 3

Output: 
0
1
2
30

FileTable: 

Heap: 
-------
Program 4:
Execution Stack: 

Symbols Table: 
v = 3

Output: 
0
1
2
30

FileTable: 

Heap: 
-------
